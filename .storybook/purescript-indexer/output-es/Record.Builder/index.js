import * as $runtime from "../runtime.js";
import * as Control$dCategory from "../Control.Category/index.js";
import * as Control$dSemigroupoid from "../Control.Semigroupoid/index.js";
import * as Record$dUnsafe$dUnion from "../Record.Unsafe.Union/index.js";
import * as Unsafe$dCoerce from "../Unsafe.Coerce/index.js";
import {copyRecord, unsafeDelete, unsafeInsert, unsafeModify, unsafeRename} from "./foreign.js";
const union = () => r1 => r2 => Record$dUnsafe$dUnion.unsafeUnionFn(r1, r2);
const semigroupoidBuilder = Control$dSemigroupoid.semigroupoidFn;
const rename = dictIsSymbol => dictIsSymbol1 => () => () => () => () => l1 => l2 => r1 => unsafeRename(dictIsSymbol.reflectSymbol(l1))(dictIsSymbol1.reflectSymbol(l2))(r1);
const nub = () => Unsafe$dCoerce.unsafeCoerce;
const modify = () => () => dictIsSymbol => l => f => r1 => unsafeModify(dictIsSymbol.reflectSymbol(l))(f)(r1);
const merge = () => () => r1 => r2 => Record$dUnsafe$dUnion.unsafeUnionFn(r1, r2);
const insert = () => () => dictIsSymbol => l => a => r1 => unsafeInsert(dictIsSymbol.reflectSymbol(l))(a)(r1);
const disjointUnion = () => () => r1 => r2 => Record$dUnsafe$dUnion.unsafeUnionFn(r1, r2);
const $$delete = dictIsSymbol => () => () => l => r2 => unsafeDelete(dictIsSymbol.reflectSymbol(l))(r2);
const categoryBuilder = Control$dCategory.categoryFn;
const build = v => r1 => v(copyRecord(r1));
const buildFromScratch = a => a({});
const flip = f => b => a => f(a)(copyRecord(b));
export {build, buildFromScratch, categoryBuilder, $$delete as delete, disjointUnion, flip, insert, merge, modify, nub, rename, semigroupoidBuilder, union};
export * from "./foreign.js";
